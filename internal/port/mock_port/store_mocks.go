// Code generated by MockGen. DO NOT EDIT.
// Source: internal/port/store.go

// Package mock_port is a generated GoMock package.
package mock_port

import (
	reflect "reflect"

	model "github.com/JoLePheno/know-your-cities/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetCityByName mocks base method.
func (m *MockStore) GetCityByName(name string) (*model.CityModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCityByName", name)
	ret0, _ := ret[0].(*model.CityModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCityByName indicates an expected call of GetCityByName.
func (mr *MockStoreMockRecorder) GetCityByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCityByName", reflect.TypeOf((*MockStore)(nil).GetCityByName), name)
}

// InsertCity mocks base method.
func (m *MockStore) InsertCity(city *model.CityModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCity", city)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertCity indicates an expected call of InsertCity.
func (mr *MockStoreMockRecorder) InsertCity(city interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCity", reflect.TypeOf((*MockStore)(nil).InsertCity), city)
}
